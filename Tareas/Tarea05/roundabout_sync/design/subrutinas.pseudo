/*
*   Copyright 2021 Josue Retana  - UCR
*   
*   Pseudocode
*/

procedure main(argc, argv[]):
  // Analyze arguments
  shared drive_min_delay := 0
  shared drive_max_delay := 0
  shared verbose := false
  if argc >= 3 then
    drive_min_delay := integer(argv[1])
    drive_max_delay := integer(argv[2])
  end if
  if argc >= 4 then
    verbose := argv[3] = "-v"
  end if
  // Vehicle capacity in each segment of the roundabout
  shared constant segment_capacity = read_integer()
  // Create array of semaphores with (segment_capacity) each
  // With N, O, S, E equivalent to 0, 1, 2, 3
  for (index < semaphore_count)
    array_semaphore:= create_semaphore(segment_capacity)
  end for
  // Create vehicles
  while can_read(stdin) do
    declare const enter_from = read_char(stdin)
    declare const exit_to = read_char(stdin)
    create_thread(vehicle, enter_from, exit_to)
  end while
end procedure

procedure vehicle(enter_from, exit_to)
  // With N, O, S, E equivalent to 0, 1, 2, 3
  counter = enter_from
  while (index != exit)
    wait(array_semaphore[counter])
    drive()
    print_pos(vehicle, counter)
    counter++
    signal(array_semaphore[counter])
  end while
end procedure

procedure drive()
  declare const range = drive_max_delay - drive_min_delay
  declare duration := drive_min_delay
  if range > 0 then
    duration += rand() % range
  end if
  sleep(duration)
end procedure

procedure print_pos(vehicle, actual_seg)
  print vehicle ": " actual_seg 
end procedure